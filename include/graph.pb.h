// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_graph_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_graph_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_graph_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_graph_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_graph_2eproto;
namespace ros_graph {
class Callback;
struct CallbackDefaultTypeInternal;
extern CallbackDefaultTypeInternal _Callback_default_instance_;
class CallbackGroup;
struct CallbackGroupDefaultTypeInternal;
extern CallbackGroupDefaultTypeInternal _CallbackGroup_default_instance_;
class Graph;
struct GraphDefaultTypeInternal;
extern GraphDefaultTypeInternal _Graph_default_instance_;
class Node;
struct NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class Subscription;
struct SubscriptionDefaultTypeInternal;
extern SubscriptionDefaultTypeInternal _Subscription_default_instance_;
class Timer;
struct TimerDefaultTypeInternal;
extern TimerDefaultTypeInternal _Timer_default_instance_;
class Topic;
struct TopicDefaultTypeInternal;
extern TopicDefaultTypeInternal _Topic_default_instance_;
}  // namespace ros_graph
PROTOBUF_NAMESPACE_OPEN
template<> ::ros_graph::Callback* Arena::CreateMaybeMessage<::ros_graph::Callback>(Arena*);
template<> ::ros_graph::CallbackGroup* Arena::CreateMaybeMessage<::ros_graph::CallbackGroup>(Arena*);
template<> ::ros_graph::Graph* Arena::CreateMaybeMessage<::ros_graph::Graph>(Arena*);
template<> ::ros_graph::Node* Arena::CreateMaybeMessage<::ros_graph::Node>(Arena*);
template<> ::ros_graph::Subscription* Arena::CreateMaybeMessage<::ros_graph::Subscription>(Arena*);
template<> ::ros_graph::Timer* Arena::CreateMaybeMessage<::ros_graph::Timer>(Arena*);
template<> ::ros_graph::Topic* Arena::CreateMaybeMessage<::ros_graph::Topic>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ros_graph {

// ===================================================================

class Topic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ros_graph.Topic) */ {
 public:
  inline Topic() : Topic(nullptr) {}
  ~Topic() override;
  explicit PROTOBUF_CONSTEXPR Topic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Topic(const Topic& from);
  Topic(Topic&& from) noexcept
    : Topic() {
    *this = ::std::move(from);
  }

  inline Topic& operator=(const Topic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Topic& operator=(Topic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Topic& default_instance() {
    return *internal_default_instance();
  }
  static inline const Topic* internal_default_instance() {
    return reinterpret_cast<const Topic*>(
               &_Topic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Topic& a, Topic& b) {
    a.Swap(&b);
  }
  inline void Swap(Topic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Topic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Topic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Topic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Topic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Topic& from) {
    Topic::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Topic* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ros_graph.Topic";
  }
  protected:
  explicit Topic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMsgSizeBytesFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 msg_size_bytes = 2;
  void clear_msg_size_bytes();
  uint32_t msg_size_bytes() const;
  void set_msg_size_bytes(uint32_t value);
  private:
  uint32_t _internal_msg_size_bytes() const;
  void _internal_set_msg_size_bytes(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ros_graph.Topic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t msg_size_bytes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class Callback final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ros_graph.Callback) */ {
 public:
  inline Callback() : Callback(nullptr) {}
  ~Callback() override;
  explicit PROTOBUF_CONSTEXPR Callback(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Callback(const Callback& from);
  Callback(Callback&& from) noexcept
    : Callback() {
    *this = ::std::move(from);
  }

  inline Callback& operator=(const Callback& from) {
    CopyFrom(from);
    return *this;
  }
  inline Callback& operator=(Callback&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Callback& default_instance() {
    return *internal_default_instance();
  }
  static inline const Callback* internal_default_instance() {
    return reinterpret_cast<const Callback*>(
               &_Callback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Callback& a, Callback& b) {
    a.Swap(&b);
  }
  inline void Swap(Callback* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Callback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Callback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Callback>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Callback& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Callback& from) {
    Callback::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Callback* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ros_graph.Callback";
  }
  protected:
  explicit Callback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishesToFieldNumber = 3,
    kNameFieldNumber = 1,
    kExecTimeUsFieldNumber = 2,
  };
  // repeated string publishes_to = 3;
  int publishes_to_size() const;
  private:
  int _internal_publishes_to_size() const;
  public:
  void clear_publishes_to();
  const std::string& publishes_to(int index) const;
  std::string* mutable_publishes_to(int index);
  void set_publishes_to(int index, const std::string& value);
  void set_publishes_to(int index, std::string&& value);
  void set_publishes_to(int index, const char* value);
  void set_publishes_to(int index, const char* value, size_t size);
  std::string* add_publishes_to();
  void add_publishes_to(const std::string& value);
  void add_publishes_to(std::string&& value);
  void add_publishes_to(const char* value);
  void add_publishes_to(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& publishes_to() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_publishes_to();
  private:
  const std::string& _internal_publishes_to(int index) const;
  std::string* _internal_add_publishes_to();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 exec_time_us = 2;
  void clear_exec_time_us();
  uint32_t exec_time_us() const;
  void set_exec_time_us(uint32_t value);
  private:
  uint32_t _internal_exec_time_us() const;
  void _internal_set_exec_time_us(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ros_graph.Callback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> publishes_to_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t exec_time_us_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class Timer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ros_graph.Timer) */ {
 public:
  inline Timer() : Timer(nullptr) {}
  ~Timer() override;
  explicit PROTOBUF_CONSTEXPR Timer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Timer(const Timer& from);
  Timer(Timer&& from) noexcept
    : Timer() {
    *this = ::std::move(from);
  }

  inline Timer& operator=(const Timer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Timer& operator=(Timer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Timer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Timer* internal_default_instance() {
    return reinterpret_cast<const Timer*>(
               &_Timer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Timer& a, Timer& b) {
    a.Swap(&b);
  }
  inline void Swap(Timer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Timer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Timer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Timer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Timer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Timer& from) {
    Timer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ros_graph.Timer";
  }
  protected:
  explicit Timer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallbackFieldNumber = 2,
    kFrequencyHzFieldNumber = 1,
  };
  // .ros_graph.Callback callback = 2;
  bool has_callback() const;
  private:
  bool _internal_has_callback() const;
  public:
  void clear_callback();
  const ::ros_graph::Callback& callback() const;
  PROTOBUF_NODISCARD ::ros_graph::Callback* release_callback();
  ::ros_graph::Callback* mutable_callback();
  void set_allocated_callback(::ros_graph::Callback* callback);
  private:
  const ::ros_graph::Callback& _internal_callback() const;
  ::ros_graph::Callback* _internal_mutable_callback();
  public:
  void unsafe_arena_set_allocated_callback(
      ::ros_graph::Callback* callback);
  ::ros_graph::Callback* unsafe_arena_release_callback();

  // uint32 frequency_hz = 1;
  void clear_frequency_hz();
  uint32_t frequency_hz() const;
  void set_frequency_hz(uint32_t value);
  private:
  uint32_t _internal_frequency_hz() const;
  void _internal_set_frequency_hz(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ros_graph.Timer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ros_graph::Callback* callback_;
    uint32_t frequency_hz_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class Subscription final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ros_graph.Subscription) */ {
 public:
  inline Subscription() : Subscription(nullptr) {}
  ~Subscription() override;
  explicit PROTOBUF_CONSTEXPR Subscription(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Subscription(const Subscription& from);
  Subscription(Subscription&& from) noexcept
    : Subscription() {
    *this = ::std::move(from);
  }

  inline Subscription& operator=(const Subscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline Subscription& operator=(Subscription&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Subscription& default_instance() {
    return *internal_default_instance();
  }
  static inline const Subscription* internal_default_instance() {
    return reinterpret_cast<const Subscription*>(
               &_Subscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Subscription& a, Subscription& b) {
    a.Swap(&b);
  }
  inline void Swap(Subscription* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Subscription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Subscription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Subscription>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Subscription& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Subscription& from) {
    Subscription::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Subscription* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ros_graph.Subscription";
  }
  protected:
  explicit Subscription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallbackFieldNumber = 1,
    kTopicFieldNumber = 2,
    kLatencyUsFieldNumber = 3,
  };
  // string callback = 1;
  void clear_callback();
  const std::string& callback() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_callback(ArgT0&& arg0, ArgT... args);
  std::string* mutable_callback();
  PROTOBUF_NODISCARD std::string* release_callback();
  void set_allocated_callback(std::string* callback);
  private:
  const std::string& _internal_callback() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_callback(const std::string& value);
  std::string* _internal_mutable_callback();
  public:

  // string topic = 2;
  void clear_topic();
  const std::string& topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topic();
  PROTOBUF_NODISCARD std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // uint32 latency_us = 3;
  void clear_latency_us();
  uint32_t latency_us() const;
  void set_latency_us(uint32_t value);
  private:
  uint32_t _internal_latency_us() const;
  void _internal_set_latency_us(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ros_graph.Subscription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr callback_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
    uint32_t latency_us_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class CallbackGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ros_graph.CallbackGroup) */ {
 public:
  inline CallbackGroup() : CallbackGroup(nullptr) {}
  ~CallbackGroup() override;
  explicit PROTOBUF_CONSTEXPR CallbackGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackGroup(const CallbackGroup& from);
  CallbackGroup(CallbackGroup&& from) noexcept
    : CallbackGroup() {
    *this = ::std::move(from);
  }

  inline CallbackGroup& operator=(const CallbackGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackGroup& operator=(CallbackGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CallbackGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackGroup* internal_default_instance() {
    return reinterpret_cast<const CallbackGroup*>(
               &_CallbackGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CallbackGroup& a, CallbackGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CallbackGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CallbackGroup& from) {
    CallbackGroup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallbackGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ros_graph.CallbackGroup";
  }
  protected:
  explicit CallbackGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated string members = 2;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  const std::string& members(int index) const;
  std::string* mutable_members(int index);
  void set_members(int index, const std::string& value);
  void set_members(int index, std::string&& value);
  void set_members(int index, const char* value);
  void set_members(int index, const char* value, size_t size);
  std::string* add_members();
  void add_members(const std::string& value);
  void add_members(std::string&& value);
  void add_members(const char* value);
  void add_members(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& members() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_members();
  private:
  const std::string& _internal_members(int index) const;
  std::string* _internal_add_members();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ros_graph.CallbackGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> members_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class Node final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ros_graph.Node) */ {
 public:
  inline Node() : Node(nullptr) {}
  ~Node() override;
  explicit PROTOBUF_CONSTEXPR Node(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Node& default_instance() {
    return *internal_default_instance();
  }
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Node& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Node& from) {
    Node::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ros_graph.Node";
  }
  protected:
  explicit Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimersFieldNumber = 2,
    kCallbacksFieldNumber = 3,
    kSubscriptionsFieldNumber = 4,
    kCallbackGroupsFieldNumber = 5,
    kNameFieldNumber = 1,
  };
  // repeated .ros_graph.Timer timers = 2;
  int timers_size() const;
  private:
  int _internal_timers_size() const;
  public:
  void clear_timers();
  ::ros_graph::Timer* mutable_timers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros_graph::Timer >*
      mutable_timers();
  private:
  const ::ros_graph::Timer& _internal_timers(int index) const;
  ::ros_graph::Timer* _internal_add_timers();
  public:
  const ::ros_graph::Timer& timers(int index) const;
  ::ros_graph::Timer* add_timers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros_graph::Timer >&
      timers() const;

  // repeated .ros_graph.Callback callbacks = 3;
  int callbacks_size() const;
  private:
  int _internal_callbacks_size() const;
  public:
  void clear_callbacks();
  ::ros_graph::Callback* mutable_callbacks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros_graph::Callback >*
      mutable_callbacks();
  private:
  const ::ros_graph::Callback& _internal_callbacks(int index) const;
  ::ros_graph::Callback* _internal_add_callbacks();
  public:
  const ::ros_graph::Callback& callbacks(int index) const;
  ::ros_graph::Callback* add_callbacks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros_graph::Callback >&
      callbacks() const;

  // repeated .ros_graph.Subscription subscriptions = 4;
  int subscriptions_size() const;
  private:
  int _internal_subscriptions_size() const;
  public:
  void clear_subscriptions();
  ::ros_graph::Subscription* mutable_subscriptions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros_graph::Subscription >*
      mutable_subscriptions();
  private:
  const ::ros_graph::Subscription& _internal_subscriptions(int index) const;
  ::ros_graph::Subscription* _internal_add_subscriptions();
  public:
  const ::ros_graph::Subscription& subscriptions(int index) const;
  ::ros_graph::Subscription* add_subscriptions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros_graph::Subscription >&
      subscriptions() const;

  // repeated .ros_graph.CallbackGroup callback_groups = 5;
  int callback_groups_size() const;
  private:
  int _internal_callback_groups_size() const;
  public:
  void clear_callback_groups();
  ::ros_graph::CallbackGroup* mutable_callback_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros_graph::CallbackGroup >*
      mutable_callback_groups();
  private:
  const ::ros_graph::CallbackGroup& _internal_callback_groups(int index) const;
  ::ros_graph::CallbackGroup* _internal_add_callback_groups();
  public:
  const ::ros_graph::CallbackGroup& callback_groups(int index) const;
  ::ros_graph::CallbackGroup* add_callback_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros_graph::CallbackGroup >&
      callback_groups() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ros_graph.Node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros_graph::Timer > timers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros_graph::Callback > callbacks_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros_graph::Subscription > subscriptions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros_graph::CallbackGroup > callback_groups_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class Graph final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ros_graph.Graph) */ {
 public:
  inline Graph() : Graph(nullptr) {}
  ~Graph() override;
  explicit PROTOBUF_CONSTEXPR Graph(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Graph(const Graph& from);
  Graph(Graph&& from) noexcept
    : Graph() {
    *this = ::std::move(from);
  }

  inline Graph& operator=(const Graph& from) {
    CopyFrom(from);
    return *this;
  }
  inline Graph& operator=(Graph&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Graph& default_instance() {
    return *internal_default_instance();
  }
  static inline const Graph* internal_default_instance() {
    return reinterpret_cast<const Graph*>(
               &_Graph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Graph& a, Graph& b) {
    a.Swap(&b);
  }
  inline void Swap(Graph* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Graph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Graph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Graph>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Graph& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Graph& from) {
    Graph::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Graph* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ros_graph.Graph";
  }
  protected:
  explicit Graph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 2,
    kTopicsFieldNumber = 3,
    kNameFieldNumber = 1,
  };
  // repeated .ros_graph.Node nodes = 2;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::ros_graph::Node* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros_graph::Node >*
      mutable_nodes();
  private:
  const ::ros_graph::Node& _internal_nodes(int index) const;
  ::ros_graph::Node* _internal_add_nodes();
  public:
  const ::ros_graph::Node& nodes(int index) const;
  ::ros_graph::Node* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros_graph::Node >&
      nodes() const;

  // repeated .ros_graph.Topic topics = 3;
  int topics_size() const;
  private:
  int _internal_topics_size() const;
  public:
  void clear_topics();
  ::ros_graph::Topic* mutable_topics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros_graph::Topic >*
      mutable_topics();
  private:
  const ::ros_graph::Topic& _internal_topics(int index) const;
  ::ros_graph::Topic* _internal_add_topics();
  public:
  const ::ros_graph::Topic& topics(int index) const;
  ::ros_graph::Topic* add_topics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros_graph::Topic >&
      topics() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ros_graph.Graph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros_graph::Node > nodes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros_graph::Topic > topics_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Topic

// string name = 1;
inline void Topic::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Topic::name() const {
  // @@protoc_insertion_point(field_get:ros_graph.Topic.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Topic::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ros_graph.Topic.name)
}
inline std::string* Topic::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ros_graph.Topic.name)
  return _s;
}
inline const std::string& Topic::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Topic::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Topic::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Topic::release_name() {
  // @@protoc_insertion_point(field_release:ros_graph.Topic.name)
  return _impl_.name_.Release();
}
inline void Topic::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ros_graph.Topic.name)
}

// uint32 msg_size_bytes = 2;
inline void Topic::clear_msg_size_bytes() {
  _impl_.msg_size_bytes_ = 0u;
}
inline uint32_t Topic::_internal_msg_size_bytes() const {
  return _impl_.msg_size_bytes_;
}
inline uint32_t Topic::msg_size_bytes() const {
  // @@protoc_insertion_point(field_get:ros_graph.Topic.msg_size_bytes)
  return _internal_msg_size_bytes();
}
inline void Topic::_internal_set_msg_size_bytes(uint32_t value) {
  
  _impl_.msg_size_bytes_ = value;
}
inline void Topic::set_msg_size_bytes(uint32_t value) {
  _internal_set_msg_size_bytes(value);
  // @@protoc_insertion_point(field_set:ros_graph.Topic.msg_size_bytes)
}

// -------------------------------------------------------------------

// Callback

// string name = 1;
inline void Callback::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Callback::name() const {
  // @@protoc_insertion_point(field_get:ros_graph.Callback.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Callback::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ros_graph.Callback.name)
}
inline std::string* Callback::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ros_graph.Callback.name)
  return _s;
}
inline const std::string& Callback::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Callback::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Callback::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Callback::release_name() {
  // @@protoc_insertion_point(field_release:ros_graph.Callback.name)
  return _impl_.name_.Release();
}
inline void Callback::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ros_graph.Callback.name)
}

// uint32 exec_time_us = 2;
inline void Callback::clear_exec_time_us() {
  _impl_.exec_time_us_ = 0u;
}
inline uint32_t Callback::_internal_exec_time_us() const {
  return _impl_.exec_time_us_;
}
inline uint32_t Callback::exec_time_us() const {
  // @@protoc_insertion_point(field_get:ros_graph.Callback.exec_time_us)
  return _internal_exec_time_us();
}
inline void Callback::_internal_set_exec_time_us(uint32_t value) {
  
  _impl_.exec_time_us_ = value;
}
inline void Callback::set_exec_time_us(uint32_t value) {
  _internal_set_exec_time_us(value);
  // @@protoc_insertion_point(field_set:ros_graph.Callback.exec_time_us)
}

// repeated string publishes_to = 3;
inline int Callback::_internal_publishes_to_size() const {
  return _impl_.publishes_to_.size();
}
inline int Callback::publishes_to_size() const {
  return _internal_publishes_to_size();
}
inline void Callback::clear_publishes_to() {
  _impl_.publishes_to_.Clear();
}
inline std::string* Callback::add_publishes_to() {
  std::string* _s = _internal_add_publishes_to();
  // @@protoc_insertion_point(field_add_mutable:ros_graph.Callback.publishes_to)
  return _s;
}
inline const std::string& Callback::_internal_publishes_to(int index) const {
  return _impl_.publishes_to_.Get(index);
}
inline const std::string& Callback::publishes_to(int index) const {
  // @@protoc_insertion_point(field_get:ros_graph.Callback.publishes_to)
  return _internal_publishes_to(index);
}
inline std::string* Callback::mutable_publishes_to(int index) {
  // @@protoc_insertion_point(field_mutable:ros_graph.Callback.publishes_to)
  return _impl_.publishes_to_.Mutable(index);
}
inline void Callback::set_publishes_to(int index, const std::string& value) {
  _impl_.publishes_to_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ros_graph.Callback.publishes_to)
}
inline void Callback::set_publishes_to(int index, std::string&& value) {
  _impl_.publishes_to_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ros_graph.Callback.publishes_to)
}
inline void Callback::set_publishes_to(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.publishes_to_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ros_graph.Callback.publishes_to)
}
inline void Callback::set_publishes_to(int index, const char* value, size_t size) {
  _impl_.publishes_to_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ros_graph.Callback.publishes_to)
}
inline std::string* Callback::_internal_add_publishes_to() {
  return _impl_.publishes_to_.Add();
}
inline void Callback::add_publishes_to(const std::string& value) {
  _impl_.publishes_to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ros_graph.Callback.publishes_to)
}
inline void Callback::add_publishes_to(std::string&& value) {
  _impl_.publishes_to_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ros_graph.Callback.publishes_to)
}
inline void Callback::add_publishes_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.publishes_to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ros_graph.Callback.publishes_to)
}
inline void Callback::add_publishes_to(const char* value, size_t size) {
  _impl_.publishes_to_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ros_graph.Callback.publishes_to)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Callback::publishes_to() const {
  // @@protoc_insertion_point(field_list:ros_graph.Callback.publishes_to)
  return _impl_.publishes_to_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Callback::mutable_publishes_to() {
  // @@protoc_insertion_point(field_mutable_list:ros_graph.Callback.publishes_to)
  return &_impl_.publishes_to_;
}

// -------------------------------------------------------------------

// Timer

// uint32 frequency_hz = 1;
inline void Timer::clear_frequency_hz() {
  _impl_.frequency_hz_ = 0u;
}
inline uint32_t Timer::_internal_frequency_hz() const {
  return _impl_.frequency_hz_;
}
inline uint32_t Timer::frequency_hz() const {
  // @@protoc_insertion_point(field_get:ros_graph.Timer.frequency_hz)
  return _internal_frequency_hz();
}
inline void Timer::_internal_set_frequency_hz(uint32_t value) {
  
  _impl_.frequency_hz_ = value;
}
inline void Timer::set_frequency_hz(uint32_t value) {
  _internal_set_frequency_hz(value);
  // @@protoc_insertion_point(field_set:ros_graph.Timer.frequency_hz)
}

// .ros_graph.Callback callback = 2;
inline bool Timer::_internal_has_callback() const {
  return this != internal_default_instance() && _impl_.callback_ != nullptr;
}
inline bool Timer::has_callback() const {
  return _internal_has_callback();
}
inline void Timer::clear_callback() {
  if (GetArenaForAllocation() == nullptr && _impl_.callback_ != nullptr) {
    delete _impl_.callback_;
  }
  _impl_.callback_ = nullptr;
}
inline const ::ros_graph::Callback& Timer::_internal_callback() const {
  const ::ros_graph::Callback* p = _impl_.callback_;
  return p != nullptr ? *p : reinterpret_cast<const ::ros_graph::Callback&>(
      ::ros_graph::_Callback_default_instance_);
}
inline const ::ros_graph::Callback& Timer::callback() const {
  // @@protoc_insertion_point(field_get:ros_graph.Timer.callback)
  return _internal_callback();
}
inline void Timer::unsafe_arena_set_allocated_callback(
    ::ros_graph::Callback* callback) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.callback_);
  }
  _impl_.callback_ = callback;
  if (callback) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ros_graph.Timer.callback)
}
inline ::ros_graph::Callback* Timer::release_callback() {
  
  ::ros_graph::Callback* temp = _impl_.callback_;
  _impl_.callback_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ros_graph::Callback* Timer::unsafe_arena_release_callback() {
  // @@protoc_insertion_point(field_release:ros_graph.Timer.callback)
  
  ::ros_graph::Callback* temp = _impl_.callback_;
  _impl_.callback_ = nullptr;
  return temp;
}
inline ::ros_graph::Callback* Timer::_internal_mutable_callback() {
  
  if (_impl_.callback_ == nullptr) {
    auto* p = CreateMaybeMessage<::ros_graph::Callback>(GetArenaForAllocation());
    _impl_.callback_ = p;
  }
  return _impl_.callback_;
}
inline ::ros_graph::Callback* Timer::mutable_callback() {
  ::ros_graph::Callback* _msg = _internal_mutable_callback();
  // @@protoc_insertion_point(field_mutable:ros_graph.Timer.callback)
  return _msg;
}
inline void Timer::set_allocated_callback(::ros_graph::Callback* callback) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.callback_;
  }
  if (callback) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(callback);
    if (message_arena != submessage_arena) {
      callback = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, callback, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.callback_ = callback;
  // @@protoc_insertion_point(field_set_allocated:ros_graph.Timer.callback)
}

// -------------------------------------------------------------------

// Subscription

// string callback = 1;
inline void Subscription::clear_callback() {
  _impl_.callback_.ClearToEmpty();
}
inline const std::string& Subscription::callback() const {
  // @@protoc_insertion_point(field_get:ros_graph.Subscription.callback)
  return _internal_callback();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Subscription::set_callback(ArgT0&& arg0, ArgT... args) {
 
 _impl_.callback_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ros_graph.Subscription.callback)
}
inline std::string* Subscription::mutable_callback() {
  std::string* _s = _internal_mutable_callback();
  // @@protoc_insertion_point(field_mutable:ros_graph.Subscription.callback)
  return _s;
}
inline const std::string& Subscription::_internal_callback() const {
  return _impl_.callback_.Get();
}
inline void Subscription::_internal_set_callback(const std::string& value) {
  
  _impl_.callback_.Set(value, GetArenaForAllocation());
}
inline std::string* Subscription::_internal_mutable_callback() {
  
  return _impl_.callback_.Mutable(GetArenaForAllocation());
}
inline std::string* Subscription::release_callback() {
  // @@protoc_insertion_point(field_release:ros_graph.Subscription.callback)
  return _impl_.callback_.Release();
}
inline void Subscription::set_allocated_callback(std::string* callback) {
  if (callback != nullptr) {
    
  } else {
    
  }
  _impl_.callback_.SetAllocated(callback, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.callback_.IsDefault()) {
    _impl_.callback_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ros_graph.Subscription.callback)
}

// string topic = 2;
inline void Subscription::clear_topic() {
  _impl_.topic_.ClearToEmpty();
}
inline const std::string& Subscription::topic() const {
  // @@protoc_insertion_point(field_get:ros_graph.Subscription.topic)
  return _internal_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Subscription::set_topic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ros_graph.Subscription.topic)
}
inline std::string* Subscription::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:ros_graph.Subscription.topic)
  return _s;
}
inline const std::string& Subscription::_internal_topic() const {
  return _impl_.topic_.Get();
}
inline void Subscription::_internal_set_topic(const std::string& value) {
  
  _impl_.topic_.Set(value, GetArenaForAllocation());
}
inline std::string* Subscription::_internal_mutable_topic() {
  
  return _impl_.topic_.Mutable(GetArenaForAllocation());
}
inline std::string* Subscription::release_topic() {
  // @@protoc_insertion_point(field_release:ros_graph.Subscription.topic)
  return _impl_.topic_.Release();
}
inline void Subscription::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  _impl_.topic_.SetAllocated(topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.topic_.IsDefault()) {
    _impl_.topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ros_graph.Subscription.topic)
}

// uint32 latency_us = 3;
inline void Subscription::clear_latency_us() {
  _impl_.latency_us_ = 0u;
}
inline uint32_t Subscription::_internal_latency_us() const {
  return _impl_.latency_us_;
}
inline uint32_t Subscription::latency_us() const {
  // @@protoc_insertion_point(field_get:ros_graph.Subscription.latency_us)
  return _internal_latency_us();
}
inline void Subscription::_internal_set_latency_us(uint32_t value) {
  
  _impl_.latency_us_ = value;
}
inline void Subscription::set_latency_us(uint32_t value) {
  _internal_set_latency_us(value);
  // @@protoc_insertion_point(field_set:ros_graph.Subscription.latency_us)
}

// -------------------------------------------------------------------

// CallbackGroup

// string name = 1;
inline void CallbackGroup::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CallbackGroup::name() const {
  // @@protoc_insertion_point(field_get:ros_graph.CallbackGroup.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CallbackGroup::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ros_graph.CallbackGroup.name)
}
inline std::string* CallbackGroup::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ros_graph.CallbackGroup.name)
  return _s;
}
inline const std::string& CallbackGroup::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CallbackGroup::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CallbackGroup::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CallbackGroup::release_name() {
  // @@protoc_insertion_point(field_release:ros_graph.CallbackGroup.name)
  return _impl_.name_.Release();
}
inline void CallbackGroup::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ros_graph.CallbackGroup.name)
}

// repeated string members = 2;
inline int CallbackGroup::_internal_members_size() const {
  return _impl_.members_.size();
}
inline int CallbackGroup::members_size() const {
  return _internal_members_size();
}
inline void CallbackGroup::clear_members() {
  _impl_.members_.Clear();
}
inline std::string* CallbackGroup::add_members() {
  std::string* _s = _internal_add_members();
  // @@protoc_insertion_point(field_add_mutable:ros_graph.CallbackGroup.members)
  return _s;
}
inline const std::string& CallbackGroup::_internal_members(int index) const {
  return _impl_.members_.Get(index);
}
inline const std::string& CallbackGroup::members(int index) const {
  // @@protoc_insertion_point(field_get:ros_graph.CallbackGroup.members)
  return _internal_members(index);
}
inline std::string* CallbackGroup::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:ros_graph.CallbackGroup.members)
  return _impl_.members_.Mutable(index);
}
inline void CallbackGroup::set_members(int index, const std::string& value) {
  _impl_.members_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ros_graph.CallbackGroup.members)
}
inline void CallbackGroup::set_members(int index, std::string&& value) {
  _impl_.members_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ros_graph.CallbackGroup.members)
}
inline void CallbackGroup::set_members(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.members_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ros_graph.CallbackGroup.members)
}
inline void CallbackGroup::set_members(int index, const char* value, size_t size) {
  _impl_.members_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ros_graph.CallbackGroup.members)
}
inline std::string* CallbackGroup::_internal_add_members() {
  return _impl_.members_.Add();
}
inline void CallbackGroup::add_members(const std::string& value) {
  _impl_.members_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ros_graph.CallbackGroup.members)
}
inline void CallbackGroup::add_members(std::string&& value) {
  _impl_.members_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ros_graph.CallbackGroup.members)
}
inline void CallbackGroup::add_members(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.members_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ros_graph.CallbackGroup.members)
}
inline void CallbackGroup::add_members(const char* value, size_t size) {
  _impl_.members_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ros_graph.CallbackGroup.members)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CallbackGroup::members() const {
  // @@protoc_insertion_point(field_list:ros_graph.CallbackGroup.members)
  return _impl_.members_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CallbackGroup::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:ros_graph.CallbackGroup.members)
  return &_impl_.members_;
}

// -------------------------------------------------------------------

// Node

// string name = 1;
inline void Node::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Node::name() const {
  // @@protoc_insertion_point(field_get:ros_graph.Node.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Node::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ros_graph.Node.name)
}
inline std::string* Node::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ros_graph.Node.name)
  return _s;
}
inline const std::string& Node::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Node::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Node::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Node::release_name() {
  // @@protoc_insertion_point(field_release:ros_graph.Node.name)
  return _impl_.name_.Release();
}
inline void Node::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ros_graph.Node.name)
}

// repeated .ros_graph.Timer timers = 2;
inline int Node::_internal_timers_size() const {
  return _impl_.timers_.size();
}
inline int Node::timers_size() const {
  return _internal_timers_size();
}
inline void Node::clear_timers() {
  _impl_.timers_.Clear();
}
inline ::ros_graph::Timer* Node::mutable_timers(int index) {
  // @@protoc_insertion_point(field_mutable:ros_graph.Node.timers)
  return _impl_.timers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros_graph::Timer >*
Node::mutable_timers() {
  // @@protoc_insertion_point(field_mutable_list:ros_graph.Node.timers)
  return &_impl_.timers_;
}
inline const ::ros_graph::Timer& Node::_internal_timers(int index) const {
  return _impl_.timers_.Get(index);
}
inline const ::ros_graph::Timer& Node::timers(int index) const {
  // @@protoc_insertion_point(field_get:ros_graph.Node.timers)
  return _internal_timers(index);
}
inline ::ros_graph::Timer* Node::_internal_add_timers() {
  return _impl_.timers_.Add();
}
inline ::ros_graph::Timer* Node::add_timers() {
  ::ros_graph::Timer* _add = _internal_add_timers();
  // @@protoc_insertion_point(field_add:ros_graph.Node.timers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros_graph::Timer >&
Node::timers() const {
  // @@protoc_insertion_point(field_list:ros_graph.Node.timers)
  return _impl_.timers_;
}

// repeated .ros_graph.Callback callbacks = 3;
inline int Node::_internal_callbacks_size() const {
  return _impl_.callbacks_.size();
}
inline int Node::callbacks_size() const {
  return _internal_callbacks_size();
}
inline void Node::clear_callbacks() {
  _impl_.callbacks_.Clear();
}
inline ::ros_graph::Callback* Node::mutable_callbacks(int index) {
  // @@protoc_insertion_point(field_mutable:ros_graph.Node.callbacks)
  return _impl_.callbacks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros_graph::Callback >*
Node::mutable_callbacks() {
  // @@protoc_insertion_point(field_mutable_list:ros_graph.Node.callbacks)
  return &_impl_.callbacks_;
}
inline const ::ros_graph::Callback& Node::_internal_callbacks(int index) const {
  return _impl_.callbacks_.Get(index);
}
inline const ::ros_graph::Callback& Node::callbacks(int index) const {
  // @@protoc_insertion_point(field_get:ros_graph.Node.callbacks)
  return _internal_callbacks(index);
}
inline ::ros_graph::Callback* Node::_internal_add_callbacks() {
  return _impl_.callbacks_.Add();
}
inline ::ros_graph::Callback* Node::add_callbacks() {
  ::ros_graph::Callback* _add = _internal_add_callbacks();
  // @@protoc_insertion_point(field_add:ros_graph.Node.callbacks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros_graph::Callback >&
Node::callbacks() const {
  // @@protoc_insertion_point(field_list:ros_graph.Node.callbacks)
  return _impl_.callbacks_;
}

// repeated .ros_graph.Subscription subscriptions = 4;
inline int Node::_internal_subscriptions_size() const {
  return _impl_.subscriptions_.size();
}
inline int Node::subscriptions_size() const {
  return _internal_subscriptions_size();
}
inline void Node::clear_subscriptions() {
  _impl_.subscriptions_.Clear();
}
inline ::ros_graph::Subscription* Node::mutable_subscriptions(int index) {
  // @@protoc_insertion_point(field_mutable:ros_graph.Node.subscriptions)
  return _impl_.subscriptions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros_graph::Subscription >*
Node::mutable_subscriptions() {
  // @@protoc_insertion_point(field_mutable_list:ros_graph.Node.subscriptions)
  return &_impl_.subscriptions_;
}
inline const ::ros_graph::Subscription& Node::_internal_subscriptions(int index) const {
  return _impl_.subscriptions_.Get(index);
}
inline const ::ros_graph::Subscription& Node::subscriptions(int index) const {
  // @@protoc_insertion_point(field_get:ros_graph.Node.subscriptions)
  return _internal_subscriptions(index);
}
inline ::ros_graph::Subscription* Node::_internal_add_subscriptions() {
  return _impl_.subscriptions_.Add();
}
inline ::ros_graph::Subscription* Node::add_subscriptions() {
  ::ros_graph::Subscription* _add = _internal_add_subscriptions();
  // @@protoc_insertion_point(field_add:ros_graph.Node.subscriptions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros_graph::Subscription >&
Node::subscriptions() const {
  // @@protoc_insertion_point(field_list:ros_graph.Node.subscriptions)
  return _impl_.subscriptions_;
}

// repeated .ros_graph.CallbackGroup callback_groups = 5;
inline int Node::_internal_callback_groups_size() const {
  return _impl_.callback_groups_.size();
}
inline int Node::callback_groups_size() const {
  return _internal_callback_groups_size();
}
inline void Node::clear_callback_groups() {
  _impl_.callback_groups_.Clear();
}
inline ::ros_graph::CallbackGroup* Node::mutable_callback_groups(int index) {
  // @@protoc_insertion_point(field_mutable:ros_graph.Node.callback_groups)
  return _impl_.callback_groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros_graph::CallbackGroup >*
Node::mutable_callback_groups() {
  // @@protoc_insertion_point(field_mutable_list:ros_graph.Node.callback_groups)
  return &_impl_.callback_groups_;
}
inline const ::ros_graph::CallbackGroup& Node::_internal_callback_groups(int index) const {
  return _impl_.callback_groups_.Get(index);
}
inline const ::ros_graph::CallbackGroup& Node::callback_groups(int index) const {
  // @@protoc_insertion_point(field_get:ros_graph.Node.callback_groups)
  return _internal_callback_groups(index);
}
inline ::ros_graph::CallbackGroup* Node::_internal_add_callback_groups() {
  return _impl_.callback_groups_.Add();
}
inline ::ros_graph::CallbackGroup* Node::add_callback_groups() {
  ::ros_graph::CallbackGroup* _add = _internal_add_callback_groups();
  // @@protoc_insertion_point(field_add:ros_graph.Node.callback_groups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros_graph::CallbackGroup >&
Node::callback_groups() const {
  // @@protoc_insertion_point(field_list:ros_graph.Node.callback_groups)
  return _impl_.callback_groups_;
}

// -------------------------------------------------------------------

// Graph

// string name = 1;
inline void Graph::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Graph::name() const {
  // @@protoc_insertion_point(field_get:ros_graph.Graph.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Graph::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ros_graph.Graph.name)
}
inline std::string* Graph::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ros_graph.Graph.name)
  return _s;
}
inline const std::string& Graph::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Graph::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Graph::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Graph::release_name() {
  // @@protoc_insertion_point(field_release:ros_graph.Graph.name)
  return _impl_.name_.Release();
}
inline void Graph::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ros_graph.Graph.name)
}

// repeated .ros_graph.Node nodes = 2;
inline int Graph::_internal_nodes_size() const {
  return _impl_.nodes_.size();
}
inline int Graph::nodes_size() const {
  return _internal_nodes_size();
}
inline void Graph::clear_nodes() {
  _impl_.nodes_.Clear();
}
inline ::ros_graph::Node* Graph::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:ros_graph.Graph.nodes)
  return _impl_.nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros_graph::Node >*
Graph::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:ros_graph.Graph.nodes)
  return &_impl_.nodes_;
}
inline const ::ros_graph::Node& Graph::_internal_nodes(int index) const {
  return _impl_.nodes_.Get(index);
}
inline const ::ros_graph::Node& Graph::nodes(int index) const {
  // @@protoc_insertion_point(field_get:ros_graph.Graph.nodes)
  return _internal_nodes(index);
}
inline ::ros_graph::Node* Graph::_internal_add_nodes() {
  return _impl_.nodes_.Add();
}
inline ::ros_graph::Node* Graph::add_nodes() {
  ::ros_graph::Node* _add = _internal_add_nodes();
  // @@protoc_insertion_point(field_add:ros_graph.Graph.nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros_graph::Node >&
Graph::nodes() const {
  // @@protoc_insertion_point(field_list:ros_graph.Graph.nodes)
  return _impl_.nodes_;
}

// repeated .ros_graph.Topic topics = 3;
inline int Graph::_internal_topics_size() const {
  return _impl_.topics_.size();
}
inline int Graph::topics_size() const {
  return _internal_topics_size();
}
inline void Graph::clear_topics() {
  _impl_.topics_.Clear();
}
inline ::ros_graph::Topic* Graph::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:ros_graph.Graph.topics)
  return _impl_.topics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros_graph::Topic >*
Graph::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:ros_graph.Graph.topics)
  return &_impl_.topics_;
}
inline const ::ros_graph::Topic& Graph::_internal_topics(int index) const {
  return _impl_.topics_.Get(index);
}
inline const ::ros_graph::Topic& Graph::topics(int index) const {
  // @@protoc_insertion_point(field_get:ros_graph.Graph.topics)
  return _internal_topics(index);
}
inline ::ros_graph::Topic* Graph::_internal_add_topics() {
  return _impl_.topics_.Add();
}
inline ::ros_graph::Topic* Graph::add_topics() {
  ::ros_graph::Topic* _add = _internal_add_topics();
  // @@protoc_insertion_point(field_add:ros_graph.Graph.topics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros_graph::Topic >&
Graph::topics() const {
  // @@protoc_insertion_point(field_list:ros_graph.Graph.topics)
  return _impl_.topics_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ros_graph

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_graph_2eproto
